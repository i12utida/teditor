#include <stdio.hmm>
#include <stdlib.hmm>
#include <string.hmm>
#include <crt0.hmm>
#include <ctype.hmm>
#define EOF -1          /* EOFの定義 */

#define LINES 100       /* 編集できる文書は最大で300行 */
#define CHARS 81        /* 編集できる文字は最大で80文字 */

#define BUFLEN 50      /* ファイル名や命令の長さは最大99文字以内 */

/*
 * グローバル変数
 */
char[][] textbuf = array(LINES,CHARS);      /* 文書を記憶するバッファ */
int lines;                                  /* 文書が全部で何行あるか */
int current;                                /* 現在第何行にいるか */

/*
 *  文字列10進を整数型10進に変換する。
 */
int translate(char[] s) {
    int v=0, i=0;
    for( ; isSpace(s[i]); i=i+1)
        ;
    for( ; isDigit(s[i]); i=i+1) {
        int d=ord(s[i])-ord('0');
        v=v*10+d;
    }
    
    return v;
}

/*
 * 1行を入力する関数(サブルーチン) 行末の改行は取り去る
 *     buf    : 1行を格納する文字配列
 *     buflen : buf に渡される文字配列のサイズ
 *     fp     : オープン済のファイルポインタ
 *              stdin が渡されるとキーボードから入力する
 */
int mygetline(char[] buf, int buflen, FILE fp) {
    char c;     /* teditorではint型からchar型に変更している */
    int i;
    boolean endflag;

    for (i=0; i<buflen-1; i=i+1) {  /* バッファの長さまでの範囲で */
        endflag = feof(fp);
        if (endflag==true)
            break;
        c=fgetc(fp);
        if (c=='\n')
            break;
        buf[i] = c;
    }
    buf[i]='\0';
    if(endflag && i==0) return EOF;         /* EOFなら-1 */
    return 0;                               /* EOF以外なら0 */
}

/*
 * ファイルから文書を textbuf へ読み込む関数(サブルーチン)
 */
void loadfile(char[] filename) {
    FILE fp;                            /* ファイルポインタ */
    boolean endflag;                    /* EOFファイル */

    fp=fopen(filename,"r");             /* ファイルをreadモードで開く */

    if (fp==null){                      /* オープン失敗 */
        lines = 0;                      /* ファイルは存在しないので最初の行から始める */
        printf("%s is created.\n", filename);
    } else {
        for (lines=0;mygetline( textbuf[lines], CHARS, fp) != EOF; lines=lines+1)
            ;
        lines=lines-1;
        fclose(fp);
    }
}

/*
 * ファイルを保存する関数
 */
void savefile(char[] filename) {
    FILE fp;                            /* ファイルポインタ */
    fp=fopen(filename,"w");             /* ファイルをWriteモードで開く */

    if (fp==null) {                     /* オープン失敗 */
        printf("Can't save file!!");
        return;
    }

    for (current=0; current<lines; current=current+1)
        fprintf(fp,"%s\n",textbuf[current]);
    printf("Saved %s\n",filename);
    fclose(fp);
}
 
/*
 * 現在の行を削除
 */
void delete() {
    int i;
    if (current!=lines) {
        for (i=current+1; i<lines; i=i+1)
            strCpy(textbuf[i-1], textbuf[i]);
        lines=lines-1;
    } else
        printf("The current line is just after final line.\n");
}

/*
 * ファイルに一行書き込む関数
 */
void insert() {
    delete();
    int i;
    for (i=lines; i>current; i=i-1)
    strCpy(textbuf[i], textbuf[i-1]);
    printf("Type new content.\n");
    mygetline(textbuf[current],CHARS,stdin);    /* 新しい内容を入力する */
    /* printf("%s\n",textbuf[current]); */
    lines=lines+1;
    current=current+1;
}

/*
 * 指定行に飛ぶ
 */
void jump() {
    char[] buf=malloc(sizeof(char)*BUFLEN);

    printf("Jump to?\n");
    mygetline(buf,BUFLEN,stdin);                /* 何行目にジャンプするか入力 */
    current=translate(buf);                     /* 文字列10進を整数型10進に変換*/
    if (current<0) current=0;                   /* ジャンプできる範囲か */
    if (current>lines) current=lines;
    
    free(buf);
}

/*
 * 行の内容を変更する
 */
void change() {
    if (current!=lines) {
        printf("%s\n",textbuf[current]);            /* 現在の行の内容を出力 */
        printf("Type new content.\n");
        mygetline(textbuf[current],CHARS,stdin);    /* 新しい内容を入力する */
    } else
        printf("The current line is just after final line.\n");
}

/*
 * 行の内容出力
 */
void print() {
    if (current!=lines)
        printf("%s\n",textbuf[current]);
    else
        printf("The current line is just after final line.\n");
}

/*
 * 操作方法を表示
 */
void help() {
    printf("Teditor has these commands.\n");
    printf("i : insert words\n");
    printf("q : quit teditor\n");
    printf("j : jump to line which you select\n");
    printf("c : overrides the one line\n");
    printf("d : delete line\n");
    printf("p : print line\n");
}

public int main() {
    char[] filename = malloc(sizeof(char)*BUFLEN); /* char型配列をint型配列に変換 */
    char[] command = malloc(sizeof(char)*BUFLEN);  /* char型配列をint型配列に変換 */
    int endflag;                          /* EOFフラグ */

    printf("Please specify filename.\n");
    mygetline(filename,BUFLEN,stdin); 
    loadfile(filename);
    current = lines;                    /* 現在行を最初の行にする */

    while(true){
        printf("[%d] Please type command.\n", current);
        endflag = mygetline(command,BUFLEN,stdin);

        if (endflag==EOF){  /* EOFなら終了 */
            printf("j\n");
            break;
        } else if (strCmp(command,"i")==0) {    /* i: 1行挿入コマンンド */
            insert();
        } else if (strCmp(command,"q")==0) {    /* q: quit */
            break;
        } else if (strCmp(command,"j")==0) {    /* j:jump */
            jump();
        } else if (strCmp(command,"c")==0) {    /* c:change */
            change();
        } else if (strCmp(command,"d")==0) {    /* d: delete */
            delete();
        } else if (strCmp(command,"p")==0) {    /* p: print */
            print();
        } else if (strCmp(command,"help")==0) { /* help:help */
            help();
        } else {
            printf("Unknown command\n");
        }
    }
    savefile(filename);
    free(filename);
    free(command);
    return 0;
}
